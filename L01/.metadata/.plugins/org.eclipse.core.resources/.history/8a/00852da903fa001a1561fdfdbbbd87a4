package tree;

public class StudentTree {
	
	private StudentNode root;
	
	
	
	public StudentTree () {
		setRoot(null);
	}
	
	public void insert (StudentNode node) {
		
		if (node == null)
			return;
		//making sure both left and right of the node are null
		node.setLeft(null);
		node.setRight(null);
		
		if (root == null)
			root = node;
		else {
			//Start with the root and look for a spot to insert
			//i.e. Traverse the tree and look for the proper spot to insert node
			StudentNode cursor = getRoot ();
			while (true) {
				StudentNode parent = cursor;
				//Question: insert to the left or right?
				if (node.getId() < cursor.getId()) {
					cursor = cursor.getLeft();
					//if the left child has no children, insert!
					if (cursor == null) {
						parent.setLeft(node);
						return;
					}
				
				}
				else if (node.getId() > cursor.getId()) {
					cursor = cursor.getRight();
					//if the right child has no children, insert
					if (cursor == null) {
						parent.setRight(node);
						return;
					}
					
				}
				else {
					System.out.println("This student already exists!");
					return;   //the  node is not added if the id already exists
				}
				
			}
		}
	}
	public void printPreOrder () {
		TraversePreOrder (getRoot());
	}
	public void printInOrder () {
		TraverseInOrder (getRoot());
	}
	public void printPostOrder () {
		TraversePostOrder (getRoot());
	}
	
	private void TraversePreOrder (StudentNode cursor) {    //Node, left subtree, right subtree 
		
		if (cursor != null) {
			System.out.println(cursor);
			TraverseInOrder (cursor.getLeft());
			TraverseInOrder (cursor.getRight());	
		}
	}
	
	private void TraverseInOrder (StudentNode cursor) {    //Nodes in ascending order
		
		if (cursor != null) {
			
			TraverseInOrder (cursor.getLeft());
			System.out.println(cursor);
			TraverseInOrder (cursor.getRight());	
		}
	}
	private void TraversePostOrder (StudentNode cursor) {    //Left, right, node		
		if (cursor != null) {
			
			TraverseInOrder (cursor.getLeft());
			TraverseInOrder (cursor.getRight());	
			System.out.println(cursor);
		}
	}
	public StudentNode search (StudentNode cursor, int key) {
		//To be completed by Students! 
		// Completed -NJ
			if (cursor == null || cursor.getId() == key)
				return cursor;
			if (key < cursor.getId())
				return search(cursor.getLeft(), key);

			return search(cursor.getRight(), key);
	}
	
	public StudentNode delete(StudentNode cursor, int key) {
		
		//To be completed by students! 
		//first you have to search for the key

			// recursive call to find node to delete while maintaining path to root.
			if (cursor == null) // if key not in tree or tree only has one node
				return cursor;

			// If the key to be deleted is smaller than
			// the root's key, then it lies in left subtree
			if (key < cursor.getId())
				cursor.setLeft(delete(cursor.getLeft(), key));

			// If the key to be deleted is greater than the
			// root's key, then it lies in right subtree
			else if (key > cursor.getId())
				cursor.setRight(delete(cursor.getRight(), key));

			else {
				// delete has three cases, no children, one child, two children.

				// single or no child node
				if ((cursor.getLeft() == null) || (cursor.getRight() == null)) {
					StudentNode temp = null;
					if (temp == cursor.getLeft()) // null
						temp = cursor.getRight();
					else
						temp = cursor.getLeft();

					// No child case (leaf node)
					if (temp == null) {
						temp = cursor;
						cursor = null; // delete current node
					} else // One child case
						cursor = temp; // Copy the contents of the non-empty child, overwriting value to be deleted.
				} else {
					// two children: find the smallest node in subtree below to take place
					// of deleted node
					StudentNode temp = minValueNode(cursor.getRight());

					// Copy the min value node data to current
					cursor.setId(temp.getId());

					// Delete the leaf node at the bottom of the tree chosen by minValueNode.
					cursor.setRight(delete(cursor.getRight(), temp.getId()));
				}
			}

			if (cursor == null) // if key not in tree or tree only has one node
				return cursor;
		
		// for AVL Tree add balancing and rotation calls here. other wise return cursor
		return cursor;
		// here you delete!

	}
	
	StudentNode minValueNode(StudentNode node) {
		StudentNode cursor = node;

		// find smallest value in subtree passed.
		while (cursor.getLeft() != null)
			cursor = cursor.getLeft();

		return cursor;
	}


	public StudentNode getRoot() {
		return root;
	}

	public void setRoot(StudentNode root) {
		this.root = root;
	}
	
	

}
