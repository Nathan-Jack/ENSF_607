package tree;

public class StudentTree {
	
	private StudentNode root;
	
	
	
	public StudentTree () {
		setRoot(null);
	}
	
	public void insert (StudentNode node) {
		
		if (node == null)
			return;
		//making sure both left and right of the node are null
		node.setLeft(null);
		node.setRight(null);
		
		if (root == null)
			root = node;
		else {
			//Start with the root and look for a spot to insert
			//i.e. Traverse the tree and look for the proper spot to insert node
			StudentNode cursor = getRoot ();
			while (true) {
				StudentNode parent = cursor;
				//Question: insert to the left or right?
				if (node.getId() < cursor.getId()) {
					cursor = cursor.getLeft();
					//if the left child has no children, insert!
					if (cursor == null) {
						parent.setLeft(node);
						return;
					}
				
				}
				else if (node.getId() > cursor.getId()) {
					cursor = cursor.getRight();
					//if the right child has no children, insert
					if (cursor == null) {
						parent.setRight(node);
						return;
					}
					
				}
				else {
					System.out.println("This student already exists!");
					return;   //the  node is not added if the id already exists
				}
				
			}
		}
	}
	public void printPreOrder () {
		TraversePreOrder (getRoot());
	}
	public void printInOrder () {
		TraverseInOrder (getRoot());
	}
	public void printPostOrder () {
		TraversePostOrder (getRoot());
	}
	
	private void TraversePreOrder (StudentNode cursor) {    //Node, left subtree, right subtree 
		
		if (cursor != null) {
			System.out.println(cursor);
			TraverseInOrder (cursor.getLeft());
			TraverseInOrder (cursor.getRight());	
		}
	}
	
	private void TraverseInOrder (StudentNode cursor) {    //Nodes in ascending order
		
		if (cursor != null) {
			
			TraverseInOrder (cursor.getLeft());
			System.out.println(cursor);
			TraverseInOrder (cursor.getRight());	
		}
	}
	private void TraversePostOrder (StudentNode cursor) {    //Left, right, node		
		if (cursor != null) {
			
			TraverseInOrder (cursor.getLeft());
			TraverseInOrder (cursor.getRight());	
			System.out.println(cursor);
		}
	}
	public StudentNode search (int key) {
		//To be completed by Students! 
		return null;
	}
	
	public StudentNode delete (int key) {
		
		//To be completed by students! 
		//first you have to search for the key
		StudentNode myNode = search (key);
		if (myNode == null)
			return null;
		// here you delete!
		return null; //replace with your own code
	}


	public StudentNode getRoot() {
		return root;
	}

	public void setRoot(StudentNode root) {
		this.root = root;
	}
	
	

}
